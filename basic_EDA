import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

ratings = pd.read_csv('ratings_export.csv')
movies = pd.read_csv(
    'movie_data.csv',
    quotechar='"',
    encoding='utf-8',
    engine='python'
)
users = pd.read_csv('users_export.csv')

# BASIC INFORMATION ABOUT DATA
print(ratings.head())
print(movies.head())
print(users.head())

print("Ratings shape:", ratings.shape)
print("Movies shape:", movies.shape)
print("Users shape:", users.shape)

print(ratings.info())
print(movies.info())
print(users.info())

# MISSING VALUES
print(ratings.isnull().sum())
print(movies.isnull().sum())
print(users.isnull().sum())

# TOP 10 MOVIES
df = ratings.merge(movies, on='movie_id', how='left')
top_movies = df.groupby('movie_title').agg({'rating_val':['mean','count']})
top_movies = top_movies[top_movies[('rating_val','count')] >= 50].sort_values(('rating_val','mean'), ascending=False)
print(top_movies.head(10))

# CLEANING DATA
ratings = ratings.dropna(subset=['movie_id'])
movies = movies.dropna(subset=['movie_id','movie_title'])
users = users.dropna(subset=['_id'])
movies['genres'] = movies['genres'].fillna('Unknown')
movies['overview'] = movies['overview'].fillna('')

# SHAPE OF DATA AFTER CLEANING
print("After cleaning:")
print(f"Ratings: {ratings.shape}")
print(f"Movies: {movies.shape}")
print(f"Users: {users.shape}")

# DISTRIBUTION OF RATINGS PLOT
sns.histplot(ratings['rating_val'], bins=10, color='skyblue', edgecolor='black')
plt.title("Distribution of Ratings")
plt.xlabel("Rating")
plt.ylabel("Count")
plt.show()

# RATINGS PER USER PLOT
ratings_per_user = ratings.groupby('user_id')['rating_val'].count()
sns.histplot(ratings_per_user, bins=50, log_scale=(False, True), color='black')
plt.title("Ratings per User")
plt.show()

# RATINGS PER MOVIE PLOT
ratings_per_movie = ratings.groupby('movie_id')['rating_val'].count()
sns.histplot(ratings_per_movie, bins=50, log_scale=(False, True), color='black')
plt.title("Ratings per Movie")
plt.show()

# DISTRIBUTION OF RATINGS PLOT
plt.figure(figsize=(6,4))
ratings['rating_val'].hist(bins=10, edgecolor='black')
plt.xlabel("Rating value")
plt.ylabel("Count")
plt.title("Distribution of Ratings")
plt.show()

# USERS ACTIVITY PLOT
ratings_per_user = ratings['user_id'].value_counts()
plt.figure(figsize=(6,4))
plt.hist(ratings_per_movie, bins=50, edgecolor='black', color='skyblue')
plt.xlabel("Ratings per user")
plt.ylabel("Number of users")
plt.title("How active are users?")
plt.show()

# MOVIE POPULARITY PLOT
ratings_per_movie = ratings['movie_id'].value_counts()
plt.figure(figsize=(6,4))
plt.hist(ratings_per_movie, bins=50, edgecolor='black', color='skyblue')
plt.xlabel("Ratings per movie")
plt.ylabel("Number of movies")
plt.title("How popular are movies?")
plt.show()

# GENRE POPULARITY PLOT
movies['genres_clean'] = movies['genres'].str.replace(r'[\[\]\'"]', '', regex=True)
genre_counts = movies['genres_clean'].str.split(',').explode().str.strip().value_counts().head(10)
plt.figure(figsize=(8,5))
plt.bar(genre_counts.index, genre_counts.values, edgecolor='black', color='skyblue')
plt.title("Top 10 Genres")
plt.xlabel("Genre")
plt.ylabel("Number of Movies")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# USER AND MOVIE COUNT
active_users = ratings_per_user[ratings_per_user >= 50].index
ratings_filtered = ratings[ratings['user_id'].isin(active_users)]
popular_movies = ratings_per_movie[ratings_per_movie >= 50].index
ratings_filtered = ratings_filtered[ratings_filtered['movie_id'].isin(popular_movies)]

num_users = ratings_filtered['user_id'].nunique()
num_movies = ratings_filtered['movie_id'].nunique()
num_ratings = len(ratings_filtered)
density = num_ratings / (num_users * num_movies)
print(f"User count: {num_users}, Movie count: {num_movies}")
